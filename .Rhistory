tOSmielesTransportar <- round(unique(mielesTransportar$word3_c1v1) / 10)
#tOSmielesTransportar <- round((unique(mielesTransportar$targetOffset) - unique(mielesTransportar$word3_c1v1)) / 20)
mielesTransportar[mielesTransportar$bin == tOSmielesTransportar, 'binN'] <- 0
mielesTransportar$binN <- mielesTransportar$bin - tOSmielesTransportar
mielesTransportar$condToken <- 2
# rol : mono : Estrenar
rolEstrenar <- filter(df_dur, target == 'rol' & verb == 'estrenar')
rolEstrenar$binN <- 999
tOSrolEstrenar <- round(unique(rolEstrenar$word3_c1v1) / 10)
#tOSrolEstrenar <- round((unique(rolEstrenar$targetOffset) - unique(rolEstrenar$word3_c1v1)) / 20)
rolEstrenar[rolEstrenar$bin == tOSrolEstrenar, 'binN'] <- 0
rolEstrenar$binN <- rolEstrenar$bin - tOSrolEstrenar
rolEstrenar$condToken <- 1
# rol : mono : Aceptar
rolAceptar <- filter(df_dur, target == 'rol' & verb == 'aceptar')
rolAceptar$binN <- 999
tOSrolAceptar <- round(unique(rolAceptar$word3_c1v1) / 10)
#tOSrolAceptar <- round((unique(rolAceptar$targetOffset) - unique(rolAceptar$word3_c1v1)) / 20)
rolAceptar[rolAceptar$bin == tOSrolAceptar, 'binN'] <- 0
rolAceptar$binN <- rolAceptar$bin - tOSrolAceptar
rolAceptar$condToken <- 2
# roles : di : Estrenar
rolesEstrenar <- filter(df_dur, target == 'roles' & verb == 'estrenar')
rolesEstrenar$binN <- 999
tOSrolesEstrenar <- round(unique(rolesEstrenar$word3_c1v1) / 10)
#tOSrolesEstrenar <- round((unique(rolesEstrenar$targetOffset) - unique(rolEstrenar$word3_c1v1)) / 20)
rolesEstrenar[rolesEstrenar$bin == tOSrolesEstrenar, 'binN'] <- 0
rolesEstrenar$binN <- rolesEstrenar$bin - tOSrolesEstrenar
rolesEstrenar$condToken <- 1
# roles : di : Aceptar
rolesAceptar <- filter(df_dur, target == 'roles' & verb == 'aceptar')
rolesAceptar$binN <- 999
tOSrolesAceptar <- round(unique(rolesAceptar$word3_c1v1) / 10)
#tOSrolesAceptar <- round((unique(rolesAceptar$targetOffset) - unique(rolesAceptar$word3_c1v1)) / 20)
rolesAceptar[rolesAceptar$bin == tOSrolesAceptar, 'binN'] <- 0
rolesAceptar$binN <- rolesAceptar$bin - tOSrolesAceptar
rolesAceptar$condToken <- 2
# sol : mono : Descubrir
solDescubrir <- filter(df_dur, target == 'sol' & verb == 'descubrir')
solDescubrir$binN <- 999
tOSsolDescubrir <- round(unique(solDescubrir$word3_c1v1) / 10)
#tOSsolDescubrir <- round((unique(solDescubrir$targetOffset) - unique(solDescubrir$word3_c1v1)) / 20)
solDescubrir[solDescubrir$bin == tOSsolDescubrir, 'binN'] <- 0
solDescubrir$binN <- solDescubrir$bin - tOSsolDescubrir
solDescubrir$condToken <- 1
# sol : mono : Escribir
solEscribir <- filter(df_dur, target == 'sol' & verb == 'escribir')
solEscribir$binN <- 999
tOSsolEscribir <- round(unique(solEscribir$word3_c1v1) / 10)
#tOSsolEscribir <- round((unique(solEscribir$targetOffset) - unique(solEscribir$word3_c1v1)) / 20)
solEscribir[solEscribir$bin == tOSsolEscribir, 'binN'] <- 0
solEscribir$binN <- solEscribir$bin - tOSsolEscribir
solEscribir$condToken <- 2
# soles : di : Descubrir
solesDescubrir <- filter(df_dur, target == 'soles' & verb == 'descubrir')
solesDescubrir$binN <- 999
tOSsolesDescubrir <- round(unique(solesDescubrir$word3_c1v1) / 10)
#tOSsolesDescubrir <- round((unique(solesDescubrir$targetOffset) - unique(solesDescubrir$word3_c1v1)) / 20)
solesDescubrir[solesDescubrir$bin == tOSsolesDescubrir, 'binN'] <- 0
solesDescubrir$binN <- solesDescubrir$bin - tOSsolesDescubrir
solesDescubrir$condToken <- 1
# soles : di : Escribir
solesEscribir <- filter(df_dur, target == 'soles' & verb == 'escribir')
solesEscribir$binN <- 999
tOSsolesEscribir <- round(unique(solesEscribir$word3_c1v1) / 10)
#tOSsolesEscribir <- round((unique(solesEscribir$targetOffset) - unique(solesEscribir$word3_c1v1)) / 20)
solesEscribir[solesEscribir$bin == tOSsolesEscribir, 'binN'] <- 0
solesEscribir$binN <- solesEscribir$bin - tOSsolesEscribir
solesEscribir$condToken <- 2
# tul : mono : Coser
tulCoser <- filter(df_dur, target == 'tul' & verb == 'coser')
tulCoser$binN <- 999
tOStulCoser <- round(unique(tulCoser$word3_c1v1) / 10)
#tOStulCoser <- round((unique(tulCoser$targetOffset) - unique(tulCoser$word3_c1v1)) / 20)
tulCoser[tulCoser$bin == tOStulCoser, 'binN'] <- 0
tulCoser$binN <- tulCoser$bin - tOStulCoser
tulCoser$condToken <- 1
# tul : mono : Pedir
tulPedir <- filter(df_dur, target == 'tul' & verb == 'pedir')
tulPedir$binN <- 999
tOStulPedir <- round(unique(tulPedir$word3_c1v1) / 10)
#tOStulPedir <- round((unique(tulPedir$targetOffset) - unique(tulPedir$word3_c1v1)) / 20)
tulPedir[tulPedir$bin == tOStulPedir, 'binN'] <- 0
tulPedir$binN <- tulPedir$bin - tOStulPedir
tulPedir$condToken <- 2
# tules : di : Coser
tulesCoser <- filter(df_dur, target == 'tules' & verb == 'coser')
tulesCoser$binN <- 999
tOStulesCoser <- round(unique(tulesCoser$word3_c1v1) / 10)
#tOStulesCoser <- round((unique(tulesCoser$targetOffset) - unique(tulesCoser$word3_c1v1)) / 20)
tulesCoser[tulesCoser$bin == tOStulesCoser, 'binN'] <- 0
tulesCoser$binN <- tulesCoser$bin - tOStulesCoser
tulesCoser$condToken <- 1
# tules : di : Pedir
tulesPedir <- filter(df_dur, target == 'tules' & verb == 'pedir')
tulesPedir$binN <- 999
tOStulesPedir <- round(unique(tulesPedir$word3_c1v1) / 10)
#tOStulesPedir <- round((unique(tulesPedir$targetOffset) - unique(tulesPedir$word3_c1v1)) / 20)
tulesPedir[tulesPedir$bin == tOStulesPedir, 'binN'] <- 0
tulesPedir$binN <- tulesPedir$bin - tOStulesPedir
tulesPedir$condToken <- 2
# 'rbind' all the dataframes together into 1
df_adj <- do.call("rbind", list(chalLucir,
chalesLucir,
chalRegalar,
chalesRegalar,
colEscoger,
colCenar,
colesEscoger,
colesCenar,
gelEmpacar,
gelUsar,
gelesEmpacar,
gelesUsar,
mesExigir,
mesConseguir,
mesesExigir,
mesesConseguir,
mielHacer,
mielTransportar,
mielesHacer,
mielesTransportar,
rolEstrenar,
rolAceptar,
rolesEstrenar,
rolesAceptar,
solDescubrir,
solEscribir,
solesDescubrir,
solesEscribir,
tulPedir,
tulCoser,
tulesCoser,
tulesPedir))
glimpse(df_dur)
df_adj <- df_dur
df_adj$binAdj <- df_adj$binN - 20
df_adj
# 'rbind' all the dataframes together into 1
df_adj <- do.call("rbind", list(chalLucir,
chalesLucir,
chalRegalar,
chalesRegalar,
colEscoger,
colCenar,
colesEscoger,
colesCenar,
gelEmpacar,
gelUsar,
gelesEmpacar,
gelesUsar,
mesExigir,
mesConseguir,
mesesExigir,
mesesConseguir,
mielHacer,
mielTransportar,
mielesHacer,
mielesTransportar,
rolEstrenar,
rolAceptar,
rolesEstrenar,
rolesAceptar,
solDescubrir,
solEscribir,
solesDescubrir,
solesEscribir,
tulPedir,
tulCoser,
tulesCoser,
tulesPedir))
df_adj
df_adj$binAdj <- df_adj$binN - 20
df_adj <- as.data.frame(df_adj)
glimpse(df_adj)
write.table(df_adj, "./mySources/data/clean/durationBIN10CleanNEW.csv", row.names = F, quote = T, sep = ",")
df_dur <- read_csv("./mySources/data/clean/durationBIN10CleanNEW.csv")
# set variables and check it again
df_dur$targetProp <- gsub(",", ".", paste(df_dur$targetProp))
df_dur$distractorProp <- gsub(",", ".", paste(df_dur$distractorProp))
df_dur <- df_dur %>%
mutate(.,
targetProp = as.numeric(targetProp),
distractorProp = as.numeric(distractorProp))
# Glimpse of data structure
glimpse(df_dur)
# Token realignment
# - 1st we calculate the lowest max
# - 2nd we calculate the highest min
# These values will become the extremes for our time course
# calculate lowest adjusted bin max in order to determine
# lowest possible upper bound for the time course
maxes <- df_dur %>%
group_by(., target, verb, condToken) %>%
summarize(max = max(binAdj)) %>%
as.data.frame(.)
binAdjMaxMin <- min(maxes$max)
# calculate highest adjusted bin minimum in order to determin
# highest possible lower bound for the time course
mins <- df_dur %>%
group_by(., target, verb, condToken) %>%
summarize(min = min(binAdj)) %>%
as.data.frame(.)
binAdjMinMax <- max(mins$min)
dur_short <- df_dur %>% filter(., binAdj <= 10 & binAdj >= binAdjMinMax)
dur_short$binREadj <- (dur_short$binAdj - binAdjMinMax) + 1
glimpse(dur_short)
# Where does target end in the shortened time course starts at word
# prior to target word)?
offsets <- dur_short %>%
group_by(., target, verb, condToken) %>%
summarize(., offset = unique(targetOffset) / 10) %>%
# summarize(., offset = (unique(targetOffset) - unique(word3_c1v1)) / 10) %>%
mutate(., condToken = as.factor(condToken)) %>%
as.data.frame(.)
# Center time course so that offset = 0
offsetAdj <- dur_short %>%
group_by(., target, verb, condToken) %>%
summarize(., offset = (unique(targetOffset) / 10) -
(unique(targetOffset) / 10)) %>%
# summarize(., offset = ((unique(targetOffset) - unique(word3_c1v1)) / 10) -
# (unique(targetOffset) - unique(word3_c1v1)) / 10) %>%
mutate(., condToken = as.factor(condToken)) %>%
as.data.frame(.)
# Where does the target word begin in the time course?
twOnsets <- dur_short %>%
group_by(., target, verb, condToken) %>%
summarize(., twOnset = unique(word4_c1v1) / 10) %>%
# summarize(., twOnset = (unique(word4_c1v1) - unique(word3_c1v1)) / 10) %>%
mutate(., condToken = as.factor(condToken)) %>%
as.data.frame(.)
# Adjust to centered time course
twOnsetAdj <- cbind(offsets, twOnsets[, 4])
twOnsetAdj <- mutate(twOnsetAdj, twOnset = twOnsets[, 4], diff = offset - twOnset, twOnsetAdj = 0 - diff)
df_dur %>%
ggplot(., aes(x = bin, y = target)) +
geom_point(alpha = 0.2, size = 0.2) +
geom_point(data = offsets, aes(x = offset, y = target), color = 'red') +
geom_point(data = twOnsets, aes(x = twOnset, y = target), color = 'blue') +
facet_grid(condToken ~ .) +
xlab("Time course") + ylab("Items") +
theme_bw(base_size = 12, base_family = "Times") -> onsetP
onsetP
df_dur %>%
ggplot(., aes(x = binAdj, y = target)) +
geom_point(alpha = 0.2, size = 0.2) +
geom_point(data = offsetAdj, aes(x = offset, y = target), color = 'red') +
geom_point(data = twOnsetAdj, aes(x = twOnsetAdj, y = target), color = 'blue') +
geom_vline(xintercept = binAdjMinMax, color = 'red') +
geom_vline(xintercept = 10, color = 'red') +
scale_y_discrete(position = "right") +
facet_grid(condToken ~ .) +
xlab("Adjusted time course") + ylab("Items") +
theme_bw(base_size = 12, base_family = "Times") -> onsetAdjP
durBinPlots <- plot_grid(onsetP, onsetAdjP, ncol = 2)
durBinPlots
# Time sequence for plots
# Create vector of times for canta
colTimes <- c(100, 296, 1178, 1890, 2030, 2333, 2457, 2767, 2946, 3471)
# Create vector of labels
colSeq   <- c("el", "cocinero", "escogio", "c", "o", "l", " para", "el", " menu", "end")
# add labels as names arg for vector colTimes
names(colTimes) <- colSeq
# adjust bins
colAdj <- (colTimes / 20) - (colTimes[6] / 20)
# turn in into a dataframe
col_df_temp <- data.frame(group = rep(c("int", "la", "ss"), each = 10),
step  = 1:10,
condition = "monosyllabic",
binAdj     = colAdj,
binN     = colAdj,
targetProp = 0.05,
text  = names(colAdj))
colesTimes <- c(100, 309, 1270, 1987, 2117, 2347, 2467, 2559, 2639, 3579)
# Create vector of labels
colesSeq   <- c("el", "cocinero", "escogio", "c", "o", "l", "e", "s", "  para", "end")
# add labels as names arg for vector cantaTimes
names(colesTimes) <- colesSeq
# adjust bins
colesAdj <- (colesTimes / 20) - (colesTimes[6] / 20)
# turn in into a dataframe
coles_df_temp <- data.frame(group = rep(c("int", "la", "ss"), each = 10),
step  = 1:10,
condition = "bisyllabic",
binAdj     = colesAdj,
binN     = colesAdj,
targetProp     = 0.05,
text  = names(colesAdj))
colesEx <- rbind(col_df_temp, coles_df_temp)
condition_names <- c(
`monosyllabic` = "Monosyllabic",
`bisyllabic` = "Bisyllabic",
`la` = "LA",
`int` = "IN",
`ss` = "SS"
)
dur_short_subset <- dur_short %>% filter(., group %in% c('la', 'int', 'ss'))
# Relevel factor
dur_short_subset$condition <- factor(dur_short_subset$condition, levels = c("monosyllabic", "bisyllabic"))
dur_short_subset$group <- factor(dur_short_subset$group, levels = c("la", "int", "ss"))
dur_short_subset %>%
na.omit(.) %>%
group_by(., participant, binAdj, group, target, verb) %>%
summarize(., targetProp = mean(targetProp)) %>%
ggplot(., aes(x = binAdj, y = targetProp)) +
facet_grid(group ~ condition, labeller = as_labeller(condition_names)) +
geom_vline(xintercept = 0, color = 'grey60') +
geom_hline(yintercept = 0.5, color = 'grey60') +
stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0, size = 0.1,
show.legend = FALSE, color = 'darkgrey') +
stat_summary(fun.y = mean, geom = 'point', size = 0.2, color = 'darkgreen') +
stat_summary(data = na.omit(dur_short_subset), aes(x = binAdj, y = distractorProp), fun.data = mean_cl_boot, geom = 'errorbar', width = 0, size = 0.1, color = 'darkgrey') +
stat_summary(data = na.omit(dur_short_subset), aes(x = binAdj, y = distractorProp), fun.y = mean, geom = 'point', size = 0.2, color = 'red') +
ylab('Proportion of fixations') +
xlab('Adjusted time course') +
ylim(0, 1) +
geom_text(data = colesEx[colesEx$step >= 3 & colesEx$step <= 9, ], aes(label = text), color = 'blue', hjust = "left") +
theme_bw(base_size = 16, base_family = "Times")
maxes
binAdjMaxMin
binAdjMinMax
dur_short <- df_dur %>% filter(., binAdj <= binAdjMaxMin & binAdj >= binAdjMinMax)
# create new adjusted variable that ranges from 1 to max
dur_short$binREadj <- (dur_short$binAdj - binAdjMinMax) + 1
# Where does target end in the shortened time course starts at word
# prior to target word)?
offsets <- dur_short %>%
group_by(., target, verb, condToken) %>%
summarize(., offset = unique(targetOffset) / 10) %>%
# summarize(., offset = (unique(targetOffset) - unique(word3_c1v1)) / 10) %>%
mutate(., condToken = as.factor(condToken)) %>%
as.data.frame(.)
# Center time course so that offset = 0
offsetAdj <- dur_short %>%
group_by(., target, verb, condToken) %>%
summarize(., offset = (unique(targetOffset) / 10) -
(unique(targetOffset) / 10)) %>%
# summarize(., offset = ((unique(targetOffset) - unique(word3_c1v1)) / 10) -
# (unique(targetOffset) - unique(word3_c1v1)) / 10) %>%
mutate(., condToken = as.factor(condToken)) %>%
as.data.frame(.)
# Where does the target word begin in the time course?
twOnsets <- dur_short %>%
group_by(., target, verb, condToken) %>%
summarize(., twOnset = unique(word4_c1v1) / 10) %>%
# summarize(., twOnset = (unique(word4_c1v1) - unique(word3_c1v1)) / 10) %>%
mutate(., condToken = as.factor(condToken)) %>%
as.data.frame(.)
# Adjust to centered time course
twOnsetAdj <- cbind(offsets, twOnsets[, 4])
twOnsetAdj <- mutate(twOnsetAdj, twOnset = twOnsets[, 4], diff = offset - twOnset, twOnsetAdj = 0 - diff)
# Plot unadjusted durations
df_dur %>%
ggplot(., aes(x = bin, y = target)) +
geom_point(alpha = 0.2, size = 0.2) +
geom_point(data = offsets, aes(x = offset, y = target), color = 'red') +
geom_point(data = twOnsets, aes(x = twOnset, y = target), color = 'blue') +
facet_grid(condToken ~ .) +
xlab("Time course") + ylab("Items") +
theme_bw(base_size = 12, base_family = "Times") -> onsetP
# Plot adjusted durations
df_dur %>%
ggplot(., aes(x = binAdj, y = target)) +
geom_point(alpha = 0.2, size = 0.2) +
geom_point(data = offsetAdj, aes(x = offset, y = target), color = 'red') +
geom_point(data = twOnsetAdj, aes(x = twOnsetAdj, y = target), color = 'blue') +
geom_vline(xintercept = binAdjMinMax, color = 'red') +
geom_vline(xintercept = 10, color = 'red') +
scale_y_discrete(position = "right") +
facet_grid(condToken ~ .) +
xlab("Adjusted time course") + ylab("Items") +
theme_bw(base_size = 12, base_family = "Times") -> onsetAdjP
durBinPlots <- plot_grid(onsetP, onsetAdjP, ncol = 2)
durBinPlots
# Time sequence for plots
# Create vector of times for canta
colTimes <- c(100, 296, 1178, 1890, 2030, 2333, 2457, 2767, 2946, 3471)
# Create vector of labels
colSeq   <- c("el", "cocinero", "escogio", "c", "o", "l", " para", "el", " menu", "end")
# add labels as names arg for vector colTimes
names(colTimes) <- colSeq
# adjust bins
colAdj <- (colTimes / 20) - (colTimes[6] / 20)
# turn in into a dataframe
col_df_temp <- data.frame(group = rep(c("int", "la", "ss"), each = 10),
step  = 1:10,
condition = "monosyllabic",
binAdj     = colAdj,
binN     = colAdj,
targetProp = 0.05,
text  = names(colAdj))
colesTimes <- c(100, 309, 1270, 1987, 2117, 2347, 2467, 2559, 2639, 3579)
# Create vector of labels
colesSeq   <- c("el", "cocinero", "escogio", "c", "o", "l", "e", "s", "  para", "end")
# add labels as names arg for vector cantaTimes
names(colesTimes) <- colesSeq
# adjust bins
colesAdj <- (colesTimes / 20) - (colesTimes[6] / 20)
# turn in into a dataframe
coles_df_temp <- data.frame(group = rep(c("int", "la", "ss"), each = 10),
step  = 1:10,
condition = "bisyllabic",
binAdj     = colesAdj,
binN     = colesAdj,
targetProp     = 0.05,
text  = names(colesAdj))
colesEx <- rbind(col_df_temp, coles_df_temp)
condition_names <- c(
`monosyllabic` = "Monosyllabic",
`bisyllabic` = "Bisyllabic",
`la` = "LA",
`int` = "IN",
`ss` = "SS"
)
dur_short_subset <- dur_short %>% filter(., group %in% c('la', 'int', 'ss'))
# Relevel factor
dur_short_subset$condition <- factor(dur_short_subset$condition, levels = c("monosyllabic", "bisyllabic"))
dur_short_subset$group <- factor(dur_short_subset$group, levels = c("la", "int", "ss"))
dur_short_subset %>%
na.omit(.) %>%
group_by(., participant, binAdj, group, target, verb) %>%
summarize(., targetProp = mean(targetProp)) %>%
ggplot(., aes(x = binAdj, y = targetProp)) +
facet_grid(group ~ condition, labeller = as_labeller(condition_names)) +
geom_vline(xintercept = 0, color = 'grey60') +
geom_hline(yintercept = 0.5, color = 'grey60') +
stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0, size = 0.1,
show.legend = FALSE, color = 'darkgrey') +
stat_summary(fun.y = mean, geom = 'point', size = 0.2, color = 'darkgreen') +
stat_summary(data = na.omit(dur_short_subset), aes(x = binAdj, y = distractorProp), fun.data = mean_cl_boot, geom = 'errorbar', width = 0, size = 0.1, color = 'darkgrey') +
stat_summary(data = na.omit(dur_short_subset), aes(x = binAdj, y = distractorProp), fun.y = mean, geom = 'point', size = 0.2, color = 'red') +
ylab('Proportion of fixations') +
xlab('Adjusted time course') +
ylim(0, 1) +
geom_text(data = colesEx[colesEx$step >= 3 & colesEx$step <= 9, ], aes(label = text), color = 'blue', hjust = "left") +
theme_bw(base_size = 16, base_family = "Times")
col_df_temp
tOScolEscoger
colTimes / 20
colTimes[6] / 20
(colTimes / 20) - (colTimes[6] / 20)
dur_short_subset$binAdj
tOScolEscoger
colTimes
colTimes / 20
colTimes / 10
round(unique(colEscoger$word3_c1v1) / 10)
dur_short_subset$word3_c1v1
dur_short_subset[dur_short_subset$word == 'col' & dur_short_subset$verb == 'escoger', 'word3_c1v1']
dur_short_subset[dur_short_subset$target == 'col' & dur_short_subset$verb == 'escoger', 'word3_c1v1']
(colTimes / 10) - (colTimes[3] / 10)
# Create vector of times for canta
colTimes <- c(100, 296, 1178, 1890, 2030, 2333, 2457, 2767, 2946, 3471)
# Create vector of labels
colSeq   <- c("el", "cocinero", "escogio", "c", "o", "l", " para", "el", " menu", "end")
# add labels as names arg for vector colTimes
names(colTimes) <- colSeq
# adjust bins
colAdj <- (colTimes / 10) - (colTimes[3] / 10)
# turn in into a dataframe
col_df_temp <- data.frame(group = rep(c("int", "la", "ss"), each = 10),
step  = 1:10,
condition = "monosyllabic",
binAdj     = colAdj,
binN     = colAdj,
targetProp = 0.05,
text  = names(colAdj))
colesTimes <- c(100, 309, 1270, 1987, 2117, 2347, 2467, 2559, 2639, 3579)
# Create vector of labels
colesSeq   <- c("el", "cocinero", "escogio", "c", "o", "l", "e", "s", "  para", "end")
# add labels as names arg for vector cantaTimes
names(colesTimes) <- colesSeq
# adjust bins
colesAdj <- (colesTimes / 10) - (colesTimes[3] / 10)
# turn in into a dataframe
coles_df_temp <- data.frame(group = rep(c("int", "la", "ss"), each = 10),
step  = 1:10,
condition = "bisyllabic",
binAdj     = colesAdj,
binN     = colesAdj,
targetProp     = 0.05,
text  = names(colesAdj))
colesEx <- rbind(col_df_temp, coles_df_temp)
condition_names <- c(
`monosyllabic` = "Monosyllabic",
`bisyllabic` = "Bisyllabic",
`la` = "LA",
`int` = "IN",
`ss` = "SS"
)
dur_short_subset <- dur_short %>% filter(., group %in% c('la', 'int', 'ss'))
# Relevel factor
dur_short_subset$condition <- factor(dur_short_subset$condition, levels = c("monosyllabic", "bisyllabic"))
dur_short_subset$group <- factor(dur_short_subset$group, levels = c("la", "int", "ss"))
dur_short_subset %>%
na.omit(.) %>%
group_by(., participant, binAdj, group, target, verb) %>%
summarize(., targetProp = mean(targetProp)) %>%
ggplot(., aes(x = binAdj, y = targetProp)) +
facet_grid(group ~ condition, labeller = as_labeller(condition_names)) +
geom_vline(xintercept = 0, color = 'grey60') +
geom_hline(yintercept = 0.5, color = 'grey60') +
stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0, size = 0.1,
show.legend = FALSE, color = 'darkgrey') +
stat_summary(fun.y = mean, geom = 'point', size = 0.2, color = 'darkgreen') +
stat_summary(data = na.omit(dur_short_subset), aes(x = binAdj, y = distractorProp), fun.data = mean_cl_boot, geom = 'errorbar', width = 0, size = 0.1, color = 'darkgrey') +
stat_summary(data = na.omit(dur_short_subset), aes(x = binAdj, y = distractorProp), fun.y = mean, geom = 'point', size = 0.2, color = 'red') +
ylab('Proportion of fixations') +
xlab('Adjusted time course') +
ylim(0, 1) +
geom_text(data = colesEx[colesEx$step >= 3 & colesEx$step <= 9, ], aes(label = text), color = 'blue', hjust = "left") +
theme_bw(base_size = 16, base_family = "Times")
