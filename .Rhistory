x = seq(from = 3, to = 0, length.out = 10),
y = seq(from = -2, to = 0, length.out = 10),
lty = c(rep(2, 9), 1),
lineColor = c("white", rep("black", 9)))
circleSA <- data.frame(x0 = -3, y0 = 2, r = 1)
circleSC <- data.frame(x0 = -3, y0 = -2, r = 1)
mygraph <- function(i) {
g <- ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = r), lty = circleMain[i, 'lty'],
data = circleMain[i, ]) +
geom_circle(aes(x0 = x0, y0 = y0, r = r), data = circleSA) +
geom_circle(aes(x0 = x0, y0 = y0, r = r), data = circleSC) +
geom_circle(aes(x0 = x0, y0 = y0, r = r), color = circleHL[i, 'lineColor'],
lty = circleHL[i, 'lty'], data = circleHL[i, ]) +
coord_fixed() +
annotate("text", x = circleMain[i, 'x'], y = circleMain[i, 'y'], label = "L2-Centered \nProgram") +
annotate("text", x = -3, y = 2, label = "Study \nAbroad") +
annotate("text", x = -3, y = -2, label = "Spanish \nClub") +
annotate("text", x = circleHL[i, 'x'], y = circleHL[i, 'y'],
color = circleHL[i, 'lineColor'], label = "HLL \nProgram") +
theme_void(base_family = "Times")
print(g)
}
saveGIF(
for(i in 1:10){
mygraph(i)
}, interval = 1, ani.width = 640, ani.height = 480)
install.packages("relaimpo")
install.packages(c("ggraph", "jsonlite", "maptools"))
install.packages(c("commonmark", "DBI", "googleAuthR", "lsmeans", "mvtnorm", "rgl", "sjmisc", "sjPlot", "sjstats", "SparseM"))
install.packages("papaja")
devtools::install_github("crsh/papaja")
library(tidyverse)
p <- ggplot(mtcars) + geom_point(aes(x = wt, y = mpg,
colour = factor(gear))) + facet_wrap(~ am)
p
p + theme_apa()
library(papaja)
p <- ggplot(mtcars) + geom_point(aes(x = wt, y = mpg,
colour = factor(gear))) + facet_wrap(~ am)
p
p + theme_apa()
p <- ggplot(mtcars) + geom_point(aes(x = wt, y = mpg,
colour = factor(gear))) + facet_wrap(~ am)
p
p + theme_bw()
install.packages("citr")
citr:::insert_citation()
blogdown:::new_post_addin()
blogdown:::serve_site()
str(mtcars)
# Load libraries here
library (tidyverse)
library(lingStuff)
library(tidyr)
temp <- list.files(path = "./data", full.names = TRUE, pattern = ".csv")
myfiles = lapply(temp, read.csv, sep = ",")
str(myfiles)
df <- do.call("rbind", myfiles)
str(df)
print(df)
temp <- list.files(path = "../data", full.names = TRUE, pattern = ".csv")
myfiles = lapply(temp, read.csv, sep = ",")
str(myfiles)
df <- do.call("rbind", myfiles)
str(df)
print(df)
ls()
str(df)
args(df)
?df
str(rank)
?rank
vec <- seq(from = 0, to = 10, by = 1)
rank(vec)
vec <- seq(from = 1, to = 10, by = 1)
rank(vec)
vec <- rnorm(100)
rank(vec)
score <- rnorm(n = 100, mean = 100, sd = 20)
library(tidyverse)
ggplot(score, aes(x = score)) +
geom_histogram()
score <- as.data.frame(rnorm(n = 100, mean = 100, sd = 20))
score
score <- as.data.frame(score = rnorm(n = 100, mean = 100, sd = 20))
as.data.frame(score = rnorm(n = 100, mean = 100, sd = 20))
as.data.frame(x = rnorm(n = 100, mean = 100, sd = 20))
score <- rnorm(n = 100, mean = 100, sd = 20)
score <- as.data.frame(score)
score
ggplot(score, aes(x = score)) +
geom_histogram()
ggplot(score, aes(x = score)) +
geom_histogram(bins = 0.5)
ggplot(score, aes(x = score)) +
geom_histogram(bins = 1)
ggplot(score, aes(x = score)) +
geom_histogram(bins = 3)
ggplot(score, aes(x = score)) +
geom_histogram(binwidth = 0.4)
ggplot(score, aes(x = score)) +
geom_histogram(binwidth = 0.7)
ggplot(score, aes(x = score)) +
geom_histogram(binwidth = 3)
ggplot(score, aes(x = score)) +
geom_histogram(binwidth = 10)
ggplot(score, aes(x = score)) +
geom_histogram(binwidth = 1)
ggplot(score, aes(x = score)) +
geom_histogram(binwidth = 2)
ggplot(score, aes(x = score)) +
geom_histogram(binwidth = 3)
ggplot(score, aes(x = score)) +
geom_histogram(bins = 3)
ggplot(score, aes(x = score)) +
geom_histogram(bins = 30)
score %>%
mutate(percrank=rank(score)/length(score))
ggplot(score, aes(x = score)) +
geom_histogram(bins = 30) +
geom_density()
ggplot(score, aes(x = score)) +
#geom_histogram(bins = 30) +
geom_density()
ggplot(score, aes(x = score)) +
#geom_histogram(bins = 30) +
geom_density(fill = 'green')
ggplot(score, aes(x = score)) +
#geom_histogram(bins = 30) +
geom_density(fill = '10grey')
ggplot(score, aes(x = score)) +
#geom_histogram(bins = 30) +
geom_density(fill = 'lightgrey')
ggplot(score, aes(x = score)) +
#geom_histogram(bins = 30) +
geom_density(fill = 'lightgrey', alpha = 0.4)
score %>%
mutate(percrank=rank(score)/length(score)) %>%
ggplot(., aes(x = score)) +
#geom_histogram(bins = 30) +
geom_density(fill = 'lightgrey', alpha = 0.4)
score %>%
mutate(percrank=rank(score)/length(score)) %>%
ggplot(., aes(x = score)) +
#geom_histogram(bins = 30) +
geom_density(fill = 'lightgrey', alpha = 0.4) +
geom_vline(x = 100)
score %>%
mutate(percrank=rank(score)/length(score)) %>%
ggplot(., aes(x = score)) +
#geom_histogram(bins = 30) +
geom_density(fill = 'lightgrey', alpha = 0.4) +
geom_vline(xintercept = 100)
score %>%
mutate(percrank=rank(score)/length(score)) %>%
ggplot(., aes(x = score)) +
geom_density(fill = 'lightgrey', alpha = 0.4) +
geom_vline(data = score[percrank == 90, ])
score %>%
mutate(percrank=rank(score)/length(score))
score %>%
mutate(percrank=rank(score)/length(score)) %>%
ggplot(., aes(x = score)) +
geom_density(fill = 'lightgrey', alpha = 0.4) +
geom_vline(xintercept = score[percrank == 90, ])
score <- score %>%
mutate(percrank=rank(score)/length(score))
ggplot(score, aes(x = score)) +
geom_density(fill = 'lightgrey', alpha = 0.4) +
geom_vline(xintercept = score[percrank == 90, ])
score[percrank == 0.90, ]
score
score[score$percrank == 0.90, ]
nintieth <- score[score$percrank == 0.90, 1]
nintieth
ggplot(score, aes(x = score)) +
geom_density(fill = 'lightgrey', alpha = 0.4) +
geom_vline(xintercept = nintieth)
?percent_rank()
x <- c(5, 1, 3, 2, 2, NA)
percent_rank(x)
score %>%
mutate(rank = percent_rank(score))
score <- rnorm(n = 100, mean = 100, sd = 20)
score <- as.data.frame(score)
score <- score %>%
mutate(rank = percent_rank(score))
score
ggplot(score, aes(x = score)) +
geom_density(fill = 'lightgrey', alpha = 0.4) +
geom_vline(xintercept = score[score$percrank == 0.90, 1])
score[score$percrank == 0.90, 1]
ggplot(score, aes(x = score)) +
geom_density(fill = 'lightgrey', alpha = 0.4) +
geom_vline(xintercept = score[score$rank == 0.90, 1])
score[score$rank == 0.90, 1]
score[score$rank == 0.90, ]
score
score[score$rank >= 0.90, ]
min(score[score$rank >= 0.90, 1])
ggplot(score, aes(x = score)) +
geom_density(fill = 'lightgrey', alpha = 0.4) +
geom_vline(xintercept = min(score[score$rank >= 0.90, 1]))
dt <- data.frame(x = c(1:200), y = rnorm(200))
dens <- density(dt$y)
df <- data.frame(x = dens$x, y = dens$y)
probs <- c(0, 0.25, 0.5, 0.75, 1)
quantiles <- quantile(dt$y, prob=probs)
df$quant <- factor(findInterval(df$x,quantiles))
ggplot(df, aes(x,y)) +
geom_line() +
geom_ribbon(aes(ymin = 0, ymax = y, fill = quant)) +
scale_x_continuous(breaks = quantiles) +
scale_fill_brewer(guide="none")
ggplot(score, aes(x = score)) +
geom_density(fill = 'lightgrey', alpha = 0.4) +
geom_vline(xintercept = min(score[score$rank >= 0.90, 1]))
dt
density(dt$y)
dens
df
quantile(dt$y, prob=probs)
factor(findInterval(df$x,quantiles))
findInterval(df$x,quantiles)
df
ggplot(df, aes(x,y)) +
geom_line()
ggplot(df, aes(x,y)) +
geom_line() +
geom_ribbon(aes(ymin = 0, ymax = y, fill = quant))
ggplot(df, aes(x,y)) +
geom_line() +
geom_ribbon(aes(ymin = 0, ymax = y, fill = quant)) +
scale_x_continuous(breaks = quantiles)
ggplot(df, aes(x,y)) +
geom_line() +
geom_ribbon(aes(ymin = 0, ymax = y, fill = quant)) +
scale_x_continuous(breaks = quantiles) +
scale_fill_brewer(guide="none")
lingStuff::lm_ex
library(huxtable); library(tidyverse)
ht <- hux(
Employee = c('John Smith', 'Jane Doe', 'David Hugh-Jones'),
Salary = c(50000, 50000, 40000),
add_colnames = TRUE
)
ht
ht %>%
set_bold(1, 1:2, TRUE)          %>%
set_bottom_border(1, 1:2, 1)    %>%
set_align(-1, 2, 'right')       %>%
set_right_padding(1:4, 1:2, 10) %>%
set_left_padding(1:4, 1:2, 10)  %>%
print_html(.)
ht %>%
set_bold(1, 1:2, TRUE)          %>%
set_bottom_border(1, 1:2, 1)    %>%
set_align(-1, 2, 'right')       %>%
set_right_padding(1:4, 1:2, 10) %>%
set_left_padding(1:4, 1:2, 10)  %>%
print_tex(.)
ht %>%
set_bold(1, 1:2, TRUE)          %>%
set_bottom_border(1, 1:2, 1)    %>%
set_align(-1, 2, 'right')       %>%
set_right_padding(1:4, 1:2, 10) %>%
set_left_padding(1:4, 1:2, 10)  %>%
print_latex(.)
install.packages(c("animation", "corpcor", "DBI", "filehash", "googleAnalyticsR", "googleAuthR", "jsonlite", "rgdal", "shiny", "sjmisc", "sourcetools", "stringi", "survival", "tibble", "vegan", "viridis", "XML"))
install.packages("plotly")
install.packages("foreign")
devtools::install_github("dirkschumacher/thankr")
library(thankr)
shoulders("library")
shoulders("lingStuff")
install_github("jvcasill/lingStuff")
library(devtools)
install_github("jvcasill/lingStuff")
shoulders("lingStuff")
set.seed(1)
axb <- data.frame(subj = sort(rep(1:10, each = 20, times = 10)),
group = gl(2, 1000, labels = c("g1", "g2")),
hit = c(rbinom(1000, size = c(0, 1), prob = .8),
rbinom(1000, size = c(0, 1), prob = .6)),
fa =  c(rbinom(1000, size = c(0, 1), prob = .3),
rbinom(1000, size = c(0, 1), prob = .4))
)
# Calculate d prime on entire data frame
dPrime(axb, hit, fa)
library(lingStuff)
set.seed(1)
axb <- data.frame(subj = sort(rep(1:10, each = 20, times = 10)),
group = gl(2, 1000, labels = c("g1", "g2")),
hit = c(rbinom(1000, size = c(0, 1), prob = .8),
rbinom(1000, size = c(0, 1), prob = .6)),
fa =  c(rbinom(1000, size = c(0, 1), prob = .3),
rbinom(1000, size = c(0, 1), prob = .4))
)
# Calculate d prime on entire data frame
dPrime(axb, hit, fa)
shoulders("lingStuff")
shoulders("package", "lingStuff")
gh_starred(lingStuff")
)
))))
gh_starred(c("lingStuff"))
appreciate()
lingStuff::thankr()
lingStuff::appreciate()
thankr::appreciate()
install.packages("googlesheets")
install.packages("lme4")
install.packages("lmerTest")
install.packages("cowplot")
install.packages("gtable")
install.packages("broom")
install.packages("MuMIn")
install.packages("gtools")
install.packages("sjPlot")
install.packages("cowsay")
install.packages("circlize")
library(circlize)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.par("track.height" = 0.1)
circos.initialize(factors = df$factors, x = df$x)
circos.track(factors = df$factors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[2] + uy(5, "mm"),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$factors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
library(circlize)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.par("track.height" = 0.1)
circos.initialize(factors = df$factors, x = df$x)
circos.track(factors = df$factors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[2] + uy(5, "mm"),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$factors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
library(circlize)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.par("track.height" = 0.1)
circos.initialize(factors = df$factors, x = df$x)
circos.track(factors = df$factors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[2] + uy(5, "mm"),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$factors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
devtools::install_github("jokergoo/circlize")
library(circlize)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.par("track.height" = 0.1)
circos.initialize(factors = df$factors, x = df$x)
circos.track(factors = df$factors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[2] + uy(5, "mm"),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$factors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
library(circlize)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.initialize(factors, xlim)
circos.track(factors, ylim)
for(sector.index in all.sector.index) {
circos.points(x1, y1, sector.index)
circos.lines(x2, y2, sector.index)
}
library(circlize)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
library(yaml)
data = yaml.load_file("https://raw.githubusercontent.com/Templarian/slack-emoji-pokemon/master/pokemon.yaml")
set.seed(123)
pokemon_list = data$emojis[sample(length(data$emojis), 40)]
pokemon_name = sapply(pokemon_list, function(x) x$name)
pokemon_src = sapply(pokemon_list, function(x) x$src)
library(EBImage)
circos.par("points.overflow.warning" = FALSE)
circos.initialize(pokemon_name, xlim = c(0, 1))
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
pos = circlize:::polar2Cartesian(circlize(CELL_META$xcenter, CELL_META$ycenter))
image = EBImage::readImage(pokemon_src[CELL_META$sector.numeric.index])
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[1] - uy(2, "mm"),
CELL_META$sector.index, facing = "clockwise", niceFacing = TRUE,
adj = c(1, 0.5), cex = 0.6)
rasterImage(image,
xleft = pos[1, 1] - 0.05, ybottom = pos[1, 2] - 0.05,
xright = pos[1, 1] + 0.05, ytop = pos[1, 2]+ 0.05)
}, bg.border = 1, track.height = 0.15)
library(yaml)
data = yaml.load_file("https://raw.githubusercontent.com/Templarian/slack-emoji-pokemon/master/pokemon.yaml")
set.seed(123)
pokemon_list = data$emojis[sample(length(data$emojis), 40)]
pokemon_name = sapply(pokemon_list, function(x) x$name)
pokemon_src = sapply(pokemon_list, function(x) x$src)
library(EBImage)
install.packages("EBImage")
circos.track(..., panel.fun = function(x, y) {
circos.points(x, y)
})
circos.points(x, y, sector.index, track.index)
circos.points(x, y)
circos.points(x, y, sector.index, track.index)
circos.points(x, y, pch, col, cex)
circos.points(x, y)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.points(x, y)
circos.points(df$x, df$y)
circos.link(sector.index1, 0, sector.index2, 0)
circos.link(sector.index1, c(0, 1), sector.index2, 0)
circos.link(sector.index1, c(0, 1), sector.index2, c(1, 2))
circos.link(sector.index1, c(0, 1), sector.index2, 0, col, lwd, lty, border)
par(mar = c(1, 1, 1, 1))
factors = letters[1:8]
circos.initialize(factors = factors, xlim = c(0, 10))
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.col = "grey",
bg.border = NA, track.height = 0.05)
circos.info(plot = TRUE)
#circos.link("a", 5, "c", 5, rou1 = 0.4, rou2 = 0.6, col = "black")
circos.link("a", 5, "g", 5, col = "black", h = 0.5, w = -0.25)
circos.link("c", 10, "d", c(1, 4), col = "#00000040", border = "black")
circos.link("a", c(2, 8), "g", c(4, 4.5), rou1 = 0.9, rou2 = 0.8,
col = "#00000040", border = "black")
circos.link("b", c(1, 10), "a", c(1, 10), rou1 = 0.9, rou2 = 0.4,
col = "#00000040", border = "black")
circos.clear()
layout(matrix(1:9, 3, 3))
for(i in 1:9) {
factors = 1:8
par(mar = c(0.5, 0.5, 0.5, 0.5))
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initialize(factors, xlim = c(0, 1))
circos.track(ylim = c(0, 1), track.height = 0.05,
bg.col = rand_color(8), bg.border = NA)
for(i in 1:20) {
se = sample(1:8, 2)
circos.link(se[1], runif(2), se[2], runif(2),
col = rand_color(1, transparency = 0.4), border = NA)
}
circos.clear()
}
# clean working directory
rm(list = ls(all = TRUE))
## @knitr stressLibs
library(plotly); library(tidyverse); library(broom); library(sjPlot)
library(lme4); library(lmerTest); library(gridExtra); library(cowplot)
library(foreign)
## @knitr ignore
# Set working directory
setwd("~/Desktop/morph_pred/")
install.packages("plotly")
library(plotly); library(tidyverse); library(broom); library(sjPlot)
library(lme4); library(lmerTest); library(gridExtra); library(cowplot)
library(foreign)
# clean working directory
rm(list = ls(all = TRUE))
## @knitr stressLibs
library(plotly); library(tidyverse); library(broom); library(sjPlot)
library(lme4); library(lmerTest); library(gridExtra); library(cowplot)
library(foreign)
## @knitr ignore
# Set working directory
setwd("~/Desktop/morph_pred/")
dataset <- read.spss('./mySources/data/gating.sav', to.data.frame=TRUE)
df <- dataset %>%
select(Exp, Group, participant = ExperimentName, Condition, Target, Accuracy) %>%
filter(., Exp == 'S', Group != 'HS' & Group != 'IN') %>%
as.tbl(.)
# remove unwanted characters from column
df$Target <- gsub(" ", "", paste(df$Target))
df$Target <- gsub("\303\263", "o", paste(df$Target))
df$participant <- gsub(" ", "", paste(df$participant))
str(df)
remove <- c("L20", "L21", "L22", "L23", "L30", "L31", "L02", "L05", "L06", "L08", "L10", "L15")
df <- filter(df, !participant %in% remove)
glimpse(df)
